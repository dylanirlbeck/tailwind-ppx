name: tailwind-ppx pipeline

on: [pull_request, push]

jobs:
  build_and_test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Install esy
        run: npm install -g esy@0.6.2

      - name: Try to restore install cache
        uses: actions/cache@v1
        with:
          path: ~/.esy/source
          key: source-${{ hashFiles('**/index.json') }}

      - name: Install
        run: esy install

      - name: Print esy cache
        id: print_esy_cache
        run: node .github/workflows/print_esy_cache.js

      - name: Try to restore build cache
        id: deps-cache-macos
        uses: actions/cache@v1
        with:
          path: ${{ steps.print_esy_cache.outputs.esy_cache }}
          key: build-${{ matrix.os }}-${{ hashFiles('**/index.json') }}
          restore-keys: build-${{ matrix.os }}-

      - name: Build
        run: |
          esy build
          # Cleanup build cache in case dependencies have changed
          esy cleanup .
      - name: Run Native tests
        run: esy test_native

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ matrix.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ matrix.os }}-yarn-

      - name: Install Yarn dependencies
        run: yarn install --frozen-lockfile
        working-directory: ./test/bucklescript

      - name: test-bucklescript
        run: |
          yarn build
          yarn test
        working-directory: ./test/bucklescript
  publish:
    needs: build_and_test
    if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/')
    name: (only on release) Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Make NPM release skeleton
        run: node script/release-make-skeleton.js

      - name: Download linux artifacts
        uses: actions/download-artifact@master
        with:
          name: ubuntu-latest
          path: _release/platform-linux-x64

      - name: Download macOS artifacts
        uses: actions/download-artifact@master
        with:
          name: macos-latest
          path: _release/platform-darwin-x64

      - name: Download windows artifacts
        uses: actions/download-artifact@master
        with:
          name: windows-latest
          path: _release/platform-windows-x64

      - name: Create archives for Github release
        run: |
          cd _release/platform-darwin-x64
          zip -r ../../tailwind-ppx-darwin-x64.zip .
          cd ../..

          cd _release/platform-linux-x64
          zip -r ../../tailwind-ppx-linux-x64.zip .
          cd ../..

          cd _release/platform-windows-x64
          zip -r ../../tailwind-ppx-windows-x64.zip .
          cd ../..
      
      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
        
      - name: Upload tailwind-ppx-darwin-x64.zip to Github release 
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: tailwind-ppx-darwin-x64.zip
          asset_name: tailwind-ppx-darwin-x64.zip
          asset_content_type: application/gzip

      - name: Upload tailwind-ppx-linux-x64.zip to Github release 
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: tailwind-ppx-linux-x64.zip
          asset_name: tailwind-ppx-linux-x64.zip
          asset_content_type: application/gzip

      - name: Upload tailwind-ppx-windows-x64.zip to Github release 
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: tailwind-ppx-windows-x64.zip
          asset_name: tailwind-ppx-windows-x64.zip
          asset_content_type: application/gzip

      - name: Publish NPM package
        run: |
          npm config set //registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN
          npm config set scope "@dylanirlbeck"
          npm config list
          npm publish --access public
        working-directory: ./_release
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
