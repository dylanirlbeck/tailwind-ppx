name: tailwind-ppx pipeline

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
    branches:
      - master

jobs:
  build_and_test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Install esy
        run: npm install -g esy

      - name: Try to restore install cache
        uses: actions/cache@v2
        with:
          path: ~/.esy/source
          key: source-${{ matrix.os }}-${{ hashFiles('**/index.json') }}

      - name: Install dependencies
        run: esy install

      - name: Print esy cache
        id: print_esy_cache
        run: node .github/workflows/print_esy_cache.js

      - name: Try to restore dependencies cache
        id: deps-cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.print_esy_cache.outputs.esy_cache }}
          key: build-${{ matrix.os }}-${{ hashFiles('**/index.json') }}
          restore-keys: build-${{ matrix.os }}-

      - name: Build dependencies
        if: steps.deps-cache.outputs.cache-hit != 'true'
        run: esy build-dependencies

      - name: Build project
        run: esy build

      - name: Run Native tests
        run: esy test_native

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ matrix.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ matrix.os }}-yarn-

      - name: Install Yarn dependencies
        run: yarn install --frozen-lockfile
        working-directory: ./test/bucklescript

      - name: test-bucklescript
        run: |
          yarn build
          yarn test
        working-directory: ./test/bucklescript

      # Create the NPM package for this platform
      - name: Create npm package
        run: esy npm-release
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}
          path: _release/

      # Cleanup build cache if dependencies have changed
      - name: Clean build cache
        if: steps.deps-cache.outputs.cache-hit != 'true'
        run: esy cleanup .

  prepare-publish:
    name: Prepare publish to npm
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v1
        with:
          node-version: 12
      - uses: actions/checkout@v2

      # Download platform artifacts
      - name: Download Linux release
        uses: actions/download-artifact@v2
        with:
          name: ubuntu-latest
          path: ubuntu-latest
      - name: Download Windows release
        uses: actions/download-artifact@v2
        with:
          name: windows-latest
          path: windows-latest
      - name: Download macOS release
        uses: actions/download-artifact@v2
        with:
          name: macos-latest
          path: macos-latest
      # Move artifacts in place
      - name: Move artifacts
        run: |
          mkdir -p _release/platform-linux
          mkdir -p _release/platform-windows-x64
          mkdir -p _release/platform-darwin
          cp -a ubuntu-latest/. _release/platform-linux
          cp -a windows-latest/. _release/platform-windows-x64
          cp -a macos-latest/. _release/platform-darwin
      - name: Prepare package
        run: node .github/workflows/bundle-release.js
      # Create a npm package that can easily be published and tested
      - name: npm pack
        run: npm pack .
        working-directory: _release
      - name: move package
        run: mv _release/*.tgz tailwind-ppx.tgz
      # Upload artifacts
      - uses: actions/upload-artifact@v2
        with:
          name: release
          path: _release/
      - uses: actions/upload-artifact@v2
        with:
          name: release-tarball
          path: tailwind-ppx.tgz

  test-platform:
    name: Test installing ${{ matrix.os }}
    needs: prepare-publish
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    steps:
      - uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Download ${{ matrix.os }} release
        uses: actions/download-artifact@v2
        with:
          name: release-tarball
      - name: test install
        run: npm -g install ./tailwind-ppx.tgz bs-platform
      - name: bootstrap test project
        run: bsb -init test-tailwind-ppx -theme basic-reason
      - name: install bs-platform locally
        run: npm install bs-platform
        working-directory: ./test-tailwind-ppx
      - name: build project
        run: npm run build
        working-directory: ./test-tailwind-ppx
      - name: test tailwind-ppx binary
        run: tailwind-ppx --help
      - name: test use-tailwind-ppx binary
        run: use-tailwind-ppx
        working-directory: ./test-tailwind-ppx

  publish:
    needs: prepare-publish
    if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/')
    name: (only on release) Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Download release
        uses: actions/download-artifact@v2
        with:
          name: release
          path: release
      - name: Zip release folder
        run: zip -r release.zip release
      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload ubuntu-latest to Github release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release.zip
          asset_name: release.zip
          asset_content_type: application/gzip

      - name: Publish NPM package
        run: |
          npm config set //registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN
          npm config set scope "@dylanirlbeck"
          npm config list
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_AUTH_TOKEN}}
        working-directory: ./release
